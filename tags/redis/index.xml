<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>redis on Hello, It&#39;s me</title>
        <link>https://x-xkang.com/tags/redis/</link>
        <description>Recent content in redis on Hello, It&#39;s me</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Wed, 29 Jun 2022 15:34:24 +0800</lastBuildDate><atom:link href="https://x-xkang.com/tags/redis/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Redis 持久化策略</title>
        <link>https://x-xkang.com/p/redis-%E6%8C%81%E4%B9%85%E5%8C%96%E7%AD%96%E7%95%A5/</link>
        <pubDate>Wed, 29 Jun 2022 15:34:24 +0800</pubDate>
        
        <guid>https://x-xkang.com/p/redis-%E6%8C%81%E4%B9%85%E5%8C%96%E7%AD%96%E7%95%A5/</guid>
        <description>&lt;p&gt;Redis提供两种持久化方式：一种是默认的RDB持久化方式，另一种是AOF（append only file）持久化方式&lt;/p&gt;
&lt;h3 id=&#34;一-rdb&#34;&gt;一、 RDB&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原理是Redis会通过单独创建（fork）一个与当前进程一模一样的子进程来进行持久化，这个子进程的所有数据（变量、环境变量、程序计数器等）都和原进程一模一样，会先将数据写入到一个临时文件中，待持久化结束了，再用这个临时文件替换上次持久化好的文件，整个过程冲，主进程不进行任何的io操作，这就确保了极高的性能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;1持久化文件在哪&#34;&gt;1、持久化文件在哪&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;启动&lt;code&gt;redis-server&lt;/code&gt; 的目录下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2什么时候fork子进程或者什么时候触发-rdb持久化机制&#34;&gt;2、什么时候fork子进程，或者什么时候触发 rdb持久化机制&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;RDB&lt;/code&gt; 方式持久化数据是通过 &lt;code&gt;fork&lt;/code&gt; 子进程，在子进程中进行数据同步&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;shutdown时，如果没有开启&lt;code&gt;aof&lt;/code&gt;，会触发配置文件中默认的快照配置
执行命令 &lt;code&gt;save&lt;/code&gt; 或者 &lt;code&gt;bgsave&lt;/code&gt; &lt;code&gt;save&lt;/code&gt;是只管保存，不管其他，全部阻塞，使用主进程进行持久化
&lt;code&gt;bgsave&lt;/code&gt; redis 会在后台异步进行快照操作，同时可以响应客户端的请求&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;3优点&#34;&gt;3、优点&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;适合数据恢复&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;4缺点&#34;&gt;4、缺点&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;数据丢失多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;blockquote&gt;
&lt;p&gt;原理是将Redis的操作日志以追加的方式写入文件，读操作是不记录的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;二aof&#34;&gt;二、AOF&lt;/h3&gt;
&lt;p&gt;为什么会出现&lt;strong&gt;AOF&lt;/strong&gt;持久化方式&lt;/p&gt;
&lt;h4 id=&#34;1这个持久化文件在哪&#34;&gt;1、这个持久化文件在哪&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;启动 &lt;code&gt;redis-server&lt;/code&gt; 的目录下会生成 &lt;code&gt;appendonly.aof&lt;/code&gt;文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2触发机制根据配置文件的配置项--appendfsync&#34;&gt;2、触发机制（根据配置文件的配置项&amp;ndash;appendfsync）&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;no: 表示操作系统进行数据缓存同步到磁盘（快，持久化没保证：写满缓冲区才会同步，若在缓冲区未写满前 shutdown 或其他意外关机，则这部分数据会丢失）
always: 同步持久化，每次发生数据变更时（增删改操作），立即记录到磁盘（慢，安全）
everysec: 表示每秒同步一次（默认值，很快，但可能会丢失1秒的数据）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;3aof-重写机制&#34;&gt;3、AOF 重写机制&lt;/h4&gt;
&lt;p&gt;重写 AOF 文件会 &lt;code&gt;fork&lt;/code&gt; 子进程去执行，会将内存中的数据写入新的 &lt;code&gt;AOF&lt;/code&gt; 文件，并且是以&lt;code&gt;RDB&lt;/code&gt; 的方式写入，重写结束后会替代旧的&lt;code&gt;AOF&lt;/code&gt; 文件，后续的客户端命令操作又重新以 &lt;code&gt;AOF&lt;/code&gt;的格式写入，&lt;code&gt;redis.conf&lt;/code&gt; 中配置触发 &lt;code&gt;AOF&lt;/code&gt; 文件重写的文件大小值&lt;code&gt;auto-aof-rewrite-percentage&lt;/code&gt; 不宜太小，因为会频繁触发重写&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;触发时机&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;redis.conf&lt;/code&gt; 的配置项 &lt;code&gt;auto-aof-rewrite-min-size&lt;/code&gt; 默认值是 64mb， 当 &lt;code&gt;AOF&lt;/code&gt; 文件大小超过这个配置值时会自动开启重写 `。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redis.conf&lt;/code&gt; 的配置项 &lt;code&gt;auto-aof-rewrite-percentage&lt;/code&gt; 默认值是100， 当 &lt;code&gt;AOF&lt;/code&gt; 文件大小的增长率大于配置值时会自动开启重写。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;4优点&#34;&gt;4、优点&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;保证数据安全&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;5缺点&#34;&gt;5、缺点&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;数据恢复慢&lt;/p&gt;
&lt;/blockquote&gt;</description>
        </item>
        <item>
        <title>Redis基础知识之缓存雪崩、击穿和穿透</title>
        <link>https://x-xkang.com/p/redis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8B%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%87%BB%E7%A9%BF%E5%92%8C%E7%A9%BF%E9%80%8F/</link>
        <pubDate>Tue, 28 Jun 2022 14:58:25 +0800</pubDate>
        
        <guid>https://x-xkang.com/p/redis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B9%8B%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%87%BB%E7%A9%BF%E5%92%8C%E7%A9%BF%E9%80%8F/</guid>
        <description>&lt;h3 id=&#34;一redis-缓存雪崩&#34;&gt;一、Redis 缓存雪崩&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;出现场景&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如果使用redis记录大量的热点数据，且过期时间为同一个常量，那么可能会出现大批的缓存数据会在同一时间或较短的时间区间内失效，redis会根据淘汰策略进行优化，如果数据量比较大会导致线程出现短暂的阻塞；另外，因为大量的缓存失效，会导致请求直接落在DB上，请求数较大情况下会直接导致数据库瘫痪，然后整个业务系统变为不可用状态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;解决方案&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;针对这种情况，我们可以在设置过期时间时加上一个随机值，类似 &lt;code&gt;redis.set(key, value, expiredTime + Math.random()*10000)&lt;/code&gt;，这样设置就不会出现在短时间内大量缓存key失效的情况。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;二redis-缓存穿透&#34;&gt;二、Redis 缓存穿透&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;出现场景&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如果用户请求的热点数据本身是不存在的，比如id为-1，或者id=&amp;lsquo;&amp;lsquo;的数据，查询缓存不存在后会将请求直接打到DB上，最终在DB中也没有查到此数据，此时Redis缓存就是去了作用，搞并发的情况下会降低数据库性能，甚至瘫痪&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;解决方案&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;增加参数校验，拦截掉大量的非法参数请求；&lt;/li&gt;
&lt;li&gt;缓存空值，因为数据库中本来就不存在这些数据，因此可以在第一次重建缓存时将value 记录为 null，下次请求时从Redis获取到 null 值直接返回（注意，要对redis查询的返回值进行严格校验，区分key不存在返回的空值和主动设置的空值null）；&lt;/li&gt;
&lt;li&gt;布隆过滤器，将DB中的热点数据加载至布隆过滤器中（布隆过滤器的特性：若在过滤器中存在，不一定真是存在；若不存在时，一定不存在），每次请求前先校验布隆过滤器是否存在该key，不存在的话直接return；&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;三redis-缓存击穿&#34;&gt;三、Redis 缓存击穿&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;出现场景&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;高并发请求同一个热点数据，在热点数据失效的瞬间，大量请求在缓存中没有命中会直接落在DB上进行查询，导致DB压力瞬间增加&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;解决方案&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;增加互斥锁，在第一个请求没有在缓存命中开始在DB进行查询并重加缓存时加上一个互斥锁，在缓存重建完成之前，对这同一热点数据的请求将会被互斥锁拦截，被拦截的这些请求根据业务需求，可以延时重试直到拿到数据或直接返回失败等；
热点数据不设置过期时间（不建议，随着热点数据的增加，无过期时间的key也越来越多，或导致Redis的存储压力增加）&lt;/p&gt;
&lt;/blockquote&gt;</description>
        </item>
        
    </channel>
</rss>
