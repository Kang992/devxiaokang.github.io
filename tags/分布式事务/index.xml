<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>分布式事务 on 不积跬步无以至千里</title>
        <link>https://x-xkang.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</link>
        <description>Recent content in 分布式事务 on 不积跬步无以至千里</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Wed, 17 Jul 2024 09:20:58 +0800</lastBuildDate><atom:link href="https://x-xkang.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>分布式事务</title>
        <link>https://x-xkang.com/p/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</link>
        <pubDate>Wed, 17 Jul 2024 09:20:58 +0800</pubDate>
        
        <guid>https://x-xkang.com/p/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</guid>
        <description>&lt;p&gt;分布式事务是在分布式系统中保证多个独立的资源（如数据库、消息队列等）上的操作作为一个整体成功或失败的机制。为了确保这些操作的原子性、一致性、隔离性和持久性（即ACID特性），分布式事务管理器使用各种协议和技术。以下是分布式事务的主要原理和关键概念的详解。&lt;/p&gt;
&lt;h3 id=&#34;分布式事务的关键概念&#34;&gt;分布式事务的关键概念&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;全局事务和局部事务&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;全局事务（Global Transaction）&lt;/strong&gt;：跨越多个独立资源的事务，由分布式事务管理器（Transaction Coordinator, TC）管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;局部事务（Local Transaction）&lt;/strong&gt;：在单个资源管理器（Resource Manager, RM）上执行的事务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;事务管理器（Transaction Coordinator, TC）&lt;/strong&gt;：负责管理全局事务的协调、提交和回滚。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;资源管理器（Resource Manager, RM）&lt;/strong&gt;：管理单个资源的事务操作，如数据库的事务管理器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;参与者（Participant）&lt;/strong&gt;：参与全局事务的各个资源管理器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;分布式事务的主要协议&#34;&gt;分布式事务的主要协议&lt;/h3&gt;
&lt;h4 id=&#34;两阶段提交协议2pc-two-phase-commit&#34;&gt;两阶段提交协议（2PC, Two-Phase Commit）&lt;/h4&gt;
&lt;p&gt;两阶段提交是最常用的分布式事务协议，由准备阶段和提交阶段组成。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;准备阶段（Prepare Phase）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事务管理器向所有参与者发送准备请求（prepare request）。&lt;/li&gt;
&lt;li&gt;参与者在接收到准备请求后，执行本地事务预处理，并将预处理结果记录到日志中，然后返回准备好的确认或失败信息给事务管理器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;提交阶段（Commit Phase）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果所有参与者都返回准备好，事务管理器向所有参与者发送提交请求（commit request）。&lt;/li&gt;
&lt;li&gt;参与者在接收到提交请求后，正式提交事务，并将提交结果记录到日志中，然后返回提交确认。&lt;/li&gt;
&lt;li&gt;如果有任何一个参与者返回失败，事务管理器向所有参与者发送回滚请求（rollback request），所有参与者回滚事务，并将回滚结果记录到日志中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;三阶段提交协议3pc-three-phase-commit&#34;&gt;三阶段提交协议（3PC, Three-Phase Commit）&lt;/h4&gt;
&lt;p&gt;三阶段提交是对两阶段提交的改进，通过增加一个预提交阶段来减少阻塞的可能性和增强容错能力。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;准备阶段（Prepare Phase）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事务管理器向所有参与者发送准备请求（prepare request）。&lt;/li&gt;
&lt;li&gt;参与者在接收到准备请求后，执行本地事务预处理，并将预处理结果记录到日志中，然后返回准备好的确认或失败信息给事务管理器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;预提交阶段（Pre-commit Phase）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果所有参与者都返回准备好，事务管理器向所有参与者发送预提交请求（pre-commit request）。&lt;/li&gt;
&lt;li&gt;参与者在接收到预提交请求后，记录预提交状态，并锁定事务，然后返回预提交确认。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;提交阶段（Commit Phase）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果所有参与者都返回预提交确认，事务管理器向所有参与者发送提交请求（commit request）。&lt;/li&gt;
&lt;li&gt;参与者在接收到提交请求后，正式提交事务，并将提交结果记录到日志中，然后返回提交确认。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果在任何阶段有一个参与者返回失败，事务管理器会发送回滚请求，所有参与者回滚事务并记录在日志中。&lt;/p&gt;
&lt;h3 id=&#34;分布式事务的实现原理&#34;&gt;分布式事务的实现原理&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;日志记录&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在每个阶段，参与者都需要将当前状态记录在日志中，以便在系统故障或重启时能够恢复正确的状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;超时机制&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参与者和事务管理器都需要设置超时机制，以防止在等待对方响应时陷入无限等待的状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;错误处理&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果任何阶段出现错误，事务管理器会发出回滚请求，确保所有参与者都回滚已执行的操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;其他分布式事务协议&#34;&gt;其他分布式事务协议&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TCC（Try-Confirm-Cancel）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Try&lt;/strong&gt;：尝试执行业务操作，预留资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Confirm&lt;/strong&gt;：确认业务操作，真正执行业务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cancel&lt;/strong&gt;：取消业务操作，释放预留资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Saga&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将全局事务拆分为一系列有序的子事务，每个子事务都有对应的补偿事务。&lt;/li&gt;
&lt;li&gt;如果某个子事务失败，则按顺序执行已成功子事务的补偿操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;分布式事务的挑战&#34;&gt;分布式事务的挑战&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;网络分区&lt;/strong&gt;：网络故障可能导致部分节点无法通信，需要设计容错机制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能开销&lt;/strong&gt;：分布式事务需要多次通信和日志记录，增加了系统的延迟和性能开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一致性与可用性&lt;/strong&gt;：在分布式系统中，通常需要在一致性和可用性之间进行权衡（CAP定理）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过使用上述协议和技术，分布式事务可以在保证系统一致性的前提下，实现跨多个独立资源的事务操作。然而，实际应用中需要根据具体业务场景和性能需求，选择适合的分布式事务管理方案。&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
