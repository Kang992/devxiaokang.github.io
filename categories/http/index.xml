<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>http on 不积跬步无以至千里</title>
        <link>https://x-xkang.com/categories/http/</link>
        <description>Recent content in http on 不积跬步无以至千里</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 17 Jun 2022 10:09:23 +0800</lastBuildDate><atom:link href="https://x-xkang.com/categories/http/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Http 协议版本进化</title>
        <link>https://x-xkang.com/p/http-%E5%8D%8F%E8%AE%AE%E7%89%88%E6%9C%AC%E8%BF%9B%E5%8C%96/</link>
        <pubDate>Fri, 17 Jun 2022 10:09:23 +0800</pubDate>
        
        <guid>https://x-xkang.com/p/http-%E5%8D%8F%E8%AE%AE%E7%89%88%E6%9C%AC%E8%BF%9B%E5%8C%96/</guid>
        <description>&lt;p&gt;&lt;strong&gt;HTTP/0.9 - 单行协议&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最初版本的HTTP协议并没有版本号，后来它的版本号被定位在0.9以区分后来的版本。HTTP/0.9极其简单：请求由单行指令构成，以唯一可用方法&lt;code&gt;GET&lt;/code&gt;开头，其后跟目标资源的路径（一旦连接到服务器，协议、服务器、端口号这些都不是必须的）。
跟后来的版本不同，HTTP/0.9的响应内容并不包含HTTP头，这意味着只有 HTML 文件可以传送，无法传送其他类型的文件；也没有状态码或者错误代码；一旦出现问题，一个特殊的包含问题描述信息的HTML文件将被发回，供人们查看。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;HTTP/1.0 - 构建可扩展性&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于 HTTP/0.9协议的应用十分有限，浏览器和服务器迅速扩展内容使其用途更广：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;协议版本信息现在会随着每个请求发送（&lt;code&gt;HTTP/1.0&lt;/code&gt;被追加到了 &lt;code&gt;GET&lt;/code&gt;行）&lt;/li&gt;
&lt;li&gt;状态码会在响应开始时发送，使浏览器能了解请求执行成功或失败，并响应调整行为（如更新或使用本地缓存）&lt;/li&gt;
&lt;li&gt;引入了 HTTP 头的概念，无论是对于请求还是响应，允许传输元数据，使协议变得非常灵活，更具扩展性。&lt;/li&gt;
&lt;li&gt;在新 HTTP 头的的帮助下，具备了传输纯文本HTML文件以外其他类型文档的能力（凭借&lt;code&gt;Content-Type&lt;/code&gt;头）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个典型的请求看起来就像这样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;GET /mypage.html HTTP/1.0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;User-Agent: NCSA_Mosaic/2.0 (Windows 3.1)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;200 OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Date: Tue, 15 Nov 1994 08:12:31 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Server: CERN/3.0 libwww/2.17
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Content-Type: text/html
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;HTML&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;一个包含图片的页面
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;lt;IMG SRC=&amp;#34;/myimage.gif&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/HTML&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;接下来是第二个请求：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;GET /myimage.gif HTTP/1.0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;User-Agent: NCSA_Mosaic/2.0 (Windows 3.1)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;200 OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Date: Tue, 15 Nov 1994 08:12:32 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Server: CERN/3.0 libwww/2.17
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Content-Type: text/gif
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(这里是图片内容)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;在 1991-1995年，这些新扩展并没有被引入到标准中以促进下注工作，而仅仅作为一种尝试：服务器和浏览器天界这些新扩展功能，但出现了大量的互操作问题。知道 1996年11月，为了解决这些问题，一份新文档（RFC 1945） 被发表出来，泳衣描述如何操作实践这些新扩展功能，文档 RFC 1945 定义了 HTTP/1.0，但它是狭义的，并不是官方标准&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;HTTP/1.1 - 标准化的协议&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTTP/1.0 多种不同的实现方式在实际运用中显得有些混乱，自 1995 年开始，即 HTTP/1.0 文档发布的下一年，就开始修订 HTTP 的第一个标准化版本。在 1997 年初，HTTP1.1 标准发布，就在 HTTP/1.0 发布的几个月后。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HTTP/1.1 消除了大量歧义内容并引入了多项改进：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;连接可以复用，节省了多次打开 TCP 连接加载网页文档资源的时间。&lt;/li&gt;
&lt;li&gt;增加管线化技术，允许在第一个应答被完全发送之前就发送第二个请求，以降低通信延迟。&lt;/li&gt;
&lt;li&gt;支持响应分块。&lt;/li&gt;
&lt;li&gt;引入额外的缓存控制机制。&lt;/li&gt;
&lt;li&gt;引入内容协商机制，包括语言，编码，类型等，并允许客户端和服务器之间约定以最合适的内容进行交换。&lt;/li&gt;
&lt;li&gt;凭借Host头，能够使不同域名配置在同一个 IP 地址的服务器上。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个典型的请求流程， 所有请求都通过一个连接实现，看起来就像这样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;GET /en-US/docs/Glossary/Simple_header HTTP/1.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Host: developer.mozilla.org
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko/20100101 Firefox/50.0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Accept-Language: en-US,en;q=0.5
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Accept-Encoding: gzip, deflate, br
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Referer: https://developer.mozilla.org/en-US/docs/Glossary/Simple_header
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;200 OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connection: Keep-Alive
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Content-Encoding: gzip
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Content-Type: text/html; charset=utf-8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Date: Wed, 20 Jul 2016 10:55:30 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Etag: &amp;#34;547fa7e369ef56031dd3bff2ace9fc0832eb251a&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Keep-Alive: timeout=5, max=1000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Last-Modified: Tue, 19 Jul 2016 00:59:33 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Server: Apache
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Transfer-Encoding: chunked
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Vary: Cookie, Accept-Encoding
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(content)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;HTTP/1.1 在 1997 年 1 月以 RFC 2068 文件发布。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTP 用于安全传输&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTTP 最大的变化发生在 1994 年底。HTTP 在基本的 TCP/IP 协议栈上发送信息，网景公司（Netscape Communication）在此基础上创建了一个额外的加密传输层：SSL 。SSL 1.0 没有在公司以外发布过，但 SSL 2.0 及其后继者 SSL 3.0 和 SSL 3.1 允许通过加密来保证服务器和客户端之间交换消息的真实性，来创建电子商务网站。SSL 在标准化道路上最终成为 TLS，随着版本 1.0, 1.1, 1.2 的出现成功地关闭漏洞。TLS 1.3 目前正在形成。&lt;/p&gt;
&lt;p&gt;与此同时，人们对一个加密传输层的需求也愈发高涨：因为 Web 最早几乎是一个学术网络，相对信任度很高，但如今不得不面对一个险恶的丛林：广告客户、随机的个人或者犯罪分子争相劫取个人信息，将信息占为己有，甚至改动将要被传输的数据。随着通过 HTTP 构建的应用程序变得越来越强大，可以访问越来越多的私人信息，如地址簿，电子邮件或用户的地理位置，即使在电子商务使用之外，对 TLS 的需求也变得普遍。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTP 用于复杂应用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tim Berners-Lee 对于 Web 的最初设想不是一个只读媒体。 他设想一个 Web 是可以远程添加或移动文档，是一种分布式文件系统。 大约 1996 年，HTTP 被扩展到允许创作，并且创建了一个名为 WebDAV 的标准。 它进一步扩展了某些特定的应用程序，如 CardDAV 用来处理地址簿条目，CalDAV 用来处理日历。 但所有这些 *DAV 扩展有一个缺陷：它们必须由要使用的服务器来实现，这是非常复杂的。并且他们在网络领域的使用必须保密。&lt;/p&gt;
&lt;p&gt;在 2000 年，一种新的使用 HTTP 的模式被设计出来：representational state transfer (或者说 REST)。 由 API 发起的操作不再通过新的 HTTP 方法传达，而只能通过使用基本的 HTTP / 1.1 方法访问特定的 URI。 这允许任何 Web 应用程序通过提供 API 以允许查看和修改其数据，而无需更新浏览器或服务器：所有需要的内容都被嵌入到由网站通过标准 HTTP/1.1 提供的文件中。 REST 模型的缺点在于每个网站都定义了自己的非标准 RESTful API，并对其进行了全面的控制；不同于 *DAV 扩展，客户端和服务器是可互操作的。 RESTful API 在 2010 年变得非常流行。&lt;/p&gt;
&lt;p&gt;自2005年以来，可用于 Web 页面的API大大增加，其中几个API为特定目的扩展了HTTP协议，大部分是新的特定HTTP头：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/Server-sent_events&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Server-sent events&lt;/a&gt; 服务器可以偶尔推送消息到浏览器&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/WebSockets_API&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Websocket&lt;/a&gt; 一个新协议，可以通过升级现有 HTTP 协议来建立&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;放松安全措施-基于当前的web模型&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HTTP 和 Web安全模型 &amp;ndash; &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;同源策略&lt;/a&gt;是互不相关的。事实上，当前的Web安全模型是在HTTP被创造出来后才被发展的！这些年来，已经在证实了它如果能通过在特定的约束下移除一些这个策略的限制来管的宽松些的话，将会更有用。这些策略导致大量的成本和时间被话费在通过转交到服务端来添加一些新的HTTP头来发送。这些被定义在了 &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/zh-CN/docs/Glossary/CORS&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Cross-Origin Resource Sharing&lt;/a&gt;(CORS) or the &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Content Security Policy&lt;/a&gt;(CSP)规范里。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不只是这大量的扩展，很多的其他的头也被加了进来，有些只是实验性的，比较著名的有 Do Not Track(&lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/DNT&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DNT&lt;/a&gt;)来控制隐私， &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/X-Frame-Options&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;X-Frame-Option&lt;/a&gt;，还有很多&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTP/2 - 为了更优异的表现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这些年来，网页愈渐变得的复杂，甚至演变成了独有的应用，可见媒体的播放量，增进交互的脚本大小也增加了许多：更多的数据通过 HTTP 请求被传输。HTTP/1.1 链接需要请求以正确的顺序发送，理论上可以用一些并行的链接（尤其是 5 到 8 个），带来的成本和复杂性堪忧。比如，HTTP 管线化（pipelining）就成为了 Web 开发的负担。&lt;/p&gt;
&lt;p&gt;在 2010 年到 2015 年，谷歌通过实践了一个实验性的 SPDY 协议，证明了一个在客户端和服务器端交换数据的另类方式。其收集了浏览器和服务器端的开发者的焦点问题。明确了响应数量的增加和解决复杂的数据传输，SPDY 成为了 HTTP/2 协议的基础。&lt;/p&gt;
&lt;p&gt;HTTP/2 和 HTTP/1.1 有几处基本的不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP/2 是二进制协议而不是文本协议。不在可读，也不是无障碍的手动创建，改善的优化技术现在可被实施。&lt;/li&gt;
&lt;li&gt;这是一个复用协议。并行的请求能在同一个链接中处理，移除了HTTP/1.x 中顺序和阻塞的约束。&lt;/li&gt;
&lt;li&gt;压缩了headers，因为 headers 在一系列请求中常常是相似的，其移除了重复和传输重复数据的成本。&lt;/li&gt;
&lt;li&gt;其允许服务器在客户端缓存中填充数据，通过一个叫服务器推送的机制来提前请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;HTTP/3 - 基于UDP的QUIC协议实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在HTTP/3中，将启用TCP协议，改为使用基于UDP协议的QUIC协议实现，此改变是为了解决HTTP/2中存在的队头阻塞问题，由于HTTP/2在单个TCP连接上使用了&lt;a class=&#34;link&#34; href=&#34;https://zh.m.wikipedia.org/zh-hans/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;多路复用&lt;/a&gt;，收到TCP&lt;a class=&#34;link&#34; href=&#34;https://zh.m.wikipedia.org/zh-hans/%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;拥塞控制&lt;/a&gt;的影响，少量的丢包就可能导致整个TCP连接上的所有流被阻塞。&lt;/p&gt;
&lt;p&gt;QUIC（快速UDP网络连接）是一种实验性的&lt;a class=&#34;link&#34; href=&#34;https://zh.m.wikipedia.org/zh-hans/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;网络传输协议&lt;/a&gt;，由Google开发，该协议旨在使网页传输更快。&lt;/p&gt;</description>
        </item>
        <item>
        <title>DNS 域名解析流程</title>
        <link>https://x-xkang.com/p/dns-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E6%B5%81%E7%A8%8B/</link>
        <pubDate>Thu, 16 Jun 2022 17:00:53 +0800</pubDate>
        
        <guid>https://x-xkang.com/p/dns-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E6%B5%81%E7%A8%8B/</guid>
        <description>&lt;p&gt;了解域名结构&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以&lt;code&gt;mail.qq.com&lt;/code&gt;域名为例，&lt;code&gt;com&lt;/code&gt;为顶级域名，&lt;code&gt;qq.com&lt;/code&gt; 为二级域名， &lt;code&gt;mail.qq.com&lt;/code&gt;为三级域名&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;顶级域名服务器&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;顶级域名为最后一个&lt;code&gt;.&lt;/code&gt;右侧部分的内容，如&lt;code&gt;mail.qq.com&lt;/code&gt;的&lt;code&gt;com&lt;/code&gt;就是顶级域名，顶级域名对应的服务器称之为顶级域名服务器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;二级域名服务器&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;域名 &lt;code&gt;mail.qq.com&lt;/code&gt;中的倒数第二个&lt;code&gt;.&lt;/code&gt;右侧部分&lt;code&gt;qq.com&lt;/code&gt;成为二级域名&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根域名服务器&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在2016年之前全球一共拥有13台根服务器，1台主根服务器在美国，其他12台为辅根服务器，其中美国9台，英国1台，瑞典1台，日本1台，这13台根服务器主要管理互联网的主目录，主要作用IPV4。
2016年，中国下一代互联网工程中心领衔发起雪人计划，旨在为下一代互联网(IPV6)提供更多的根服务器解决方案，该计划于2017年完成，其中包含3台主根服务器，中国1台，美国1台，日本1台，22台辅根服务器，中国3台，美国2台，印度和法国分别有3台，德国2台，俄罗斯、意大利、西班牙、奥地利、智利、南非、澳大利亚、瑞士、荷兰各1台，共22台，从此形成了13台原有根加25台IPV6根服务器的新格局&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本地域名服务器&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本地域名服务器的范围非常广，没有一个详细的定位，可能是某个运营商部署在该城市的一台服务器，也可能是某个公司的一台服务器，甚至可能是某个学校的服务器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;存放地址&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器缓存&lt;/li&gt;
&lt;li&gt;系统缓存&lt;/li&gt;
&lt;li&gt;本地域名服务器&lt;/li&gt;
&lt;li&gt;根域名服务器&lt;/li&gt;
&lt;li&gt;顶级域名服务器&lt;/li&gt;
&lt;li&gt;二级域名服务器&lt;/li&gt;
&lt;li&gt;&amp;hellip; &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查询顺序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;检查浏览器缓存中是否存在改域名与IP地址的映射关系，如果有则解析结束，没有则继续&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;到系统本地查找映射关系，一般存在 &lt;code&gt;hosts&lt;/code&gt; 文件中，如果有则解析结束，否则继续&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;到本地域名服务器去查询，有则结束，否则继续&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;本地域名服务器去查询 根域名服务器，该过程不会返回映射关系，只会告诉你去下级服务器（顶级域名服务器）查询&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;本地域名服务器查询顶级域名服务器（即 &lt;code&gt;com&lt;/code&gt; 服务器），同样不会返回映射关系，只会引导你去二级域名服务器查询&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;本地域名服务器查询二级域名服务器（即 &lt;code&gt;qq.com&lt;/code&gt; 服务器），引导去三级域名服务器&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;本地域名服务器查询三级域名服务器（即 &lt;code&gt;mail.qq.com&lt;/code&gt;）， 此时已经是最后一级，如果有则返回映射关系，并且本地服务器加入自身的映射表中，方便下次查询，同时返回给用户的计算机，没有找到则网页报错&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>Http 状态码</title>
        <link>https://x-xkang.com/p/http-%E7%8A%B6%E6%80%81%E7%A0%81/</link>
        <pubDate>Tue, 14 Jun 2022 21:33:58 +0800</pubDate>
        
        <guid>https://x-xkang.com/p/http-%E7%8A%B6%E6%80%81%E7%A0%81/</guid>
        <description>&lt;h3 id=&#34;一http状态码分类&#34;&gt;一、HTTP状态码分类&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;HTTP&lt;/code&gt; 状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，响应分为五类：消息响应（100-199），成功响应（200-299），重定向消息（300-399），客户端错误响应（400-499）和服务器错误响应（500-599）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;分类&lt;/th&gt;
&lt;th&gt;分来描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1**&lt;/td&gt;
&lt;td&gt;信息，服务器收到请求，需要请求者继续执行操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2**&lt;/td&gt;
&lt;td&gt;操作被成功接收并处理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3**&lt;/td&gt;
&lt;td&gt;重定向，需要进一步操作以完成请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4**&lt;/td&gt;
&lt;td&gt;客户端错误，请求包含语法错误或无法完成请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5**&lt;/td&gt;
&lt;td&gt;服务器错误，服务器在处理请求的过程发生了错误&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;二状态码分类描述&#34;&gt;二、状态码分类描述&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;状态码&lt;/th&gt;
&lt;th&gt;英文状态码&lt;/th&gt;
&lt;th&gt;中文描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;100&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Continue&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;这个临时响应表明，迄今为止的所有内容都是可行的，客户端应该继续请求，如果以完成，请忽略它。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;101&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Switching Protocols&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;该代码是响应客户端 &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Upgrade&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Upgrade(en-US).&lt;/a&gt; 请求头发送的，指明服务器即将切换的协议&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;102&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Processing&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;此代码表示服务器以收到并且正在处理该请求，但当前没有响应可用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;103&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Early Hints&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;次状态码主要用于与 &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Link&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Link&lt;/a&gt; 链接头一起使用，以允许用户代理在服务器响应阶段时开始预加载 &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTML/Link_types/preload&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;preloading&lt;/a&gt; 资源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;200&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;OK&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;请求成功&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;201&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Created&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;该请求已成功，并因此创建了一个新的资源。这通常是在 POST 请求，或是某些 PUT 请求之后返回的响应&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;202&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Accepted&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;请求已经接收到，但还未响应，没有结果。意味着不会有一个异步的响应去表明当前请求的结果，预期另外的进程和服务去处理请求，或者批处理。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;203&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Non-Authoritative Information&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超集。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;204&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;No Content&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;对于该请求没有的内容可发送，但头部字段可能有用。用户代理可能会用此时请求头部信息来更新原来资源的头部缓存字段。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;205&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Reset Content&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;告诉用户代理重置发送此请求的文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;206&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Partial Content&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当从客户端发送Range范围标头以只请求资源的一部分时，将使用此响应代码。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;207&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Multi Status&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;对于多个状态代码都可能合适的情况，传输有关多个资源的信息。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;208&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Already Reported&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在 DAV 里面使用 &lt;a class=&#34;link&#34; href=&#34;dav:propstat&#34; &gt;dav:propstat&lt;/a&gt; 响应元素以避免重复枚举多个绑定的内部成员到同一个集合。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;226&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;IM Used&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;服务器已经完成了对资源的GET请求，并且响应是对当前实例应用的一个或多个实例操作结果的表示。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;300&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Multiple Choice&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;请求拥有不只一个的可鞥响应。用户带来或者用户应当从中选择一个。 (没有标准化的方法来选择其中一个响应，但是建议使用指向可能性的 HTML 链接，以便用户可以选择。)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;301&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Moved Permanently&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;请求资源的 URL 已永久更改。在响应中给出了新的 URL。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;302&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Found&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;此响应代码表示所请求资源的 URI 已 暂时 更改。未来可能会对 URI 进行进一步的改变。因此，客户机应该在将来的请求中使用这个相同的 URI。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;303&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;See Other&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;服务器发送此响应，以指示客户端通过一个 GET 请求在另一个 URI 中获取所请求的资源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;304&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Not Modified&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;这是用于缓存的目的。它告诉客户端响应还没有被修改，因此客户端可以继续使用相同的缓存版本的响应。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;305&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Use Proxy&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在 HTTP 规范中定义，以指示请求的响应必须被代理访问。由于对代理的带内配置的安全考虑，它已被弃用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;306&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;unused&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;此响应代码不再使用；它只是保留。它曾在 HTTP/1.1 规范的早期版本中使用过。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;307&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Temporary Redirect&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;服务器发送此响应，以指示客户端使用在前一个请求中使用的相同方法在另一个 URI 上获取所请求的资源。这与 302 Found HTTP 响应代码具有相同的语义，但用户代理 不能 更改所使用的 HTTP 方法：如果在第一个请求中使用了 POST，则在第二个请求中必须使用 &lt;code&gt;POST&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;308&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Permanent Redirect&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;这意味着资源现在永久位于由Location: HTTP Response 标头指定的另一个 URI。 这与 301 Moved Permanently HTTP 响应代码具有相同的语义，但用户代理不能更改所使用的 HTTP 方法：如果在第一个请求中使用 POST，则必须在第二个请求中使用 POST。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;400&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Bad Request&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;由于被认为是客户端错误（例如，错误的请求语法、无效的请求消息帧或欺骗性的请求路由），服务器无法或不会处理请求。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;401&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Unauthorized&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;虽然 HTTP 标准指定了&amp;quot;unauthorized&amp;quot;，但从语义上来说，这个响应意味着&amp;quot;unauthenticated&amp;quot;。也就是说，客户端必须对自身进行身份验证才能获得请求的响应。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;402&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Payment Required&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;此响应代码保留供将来使用。创建此代码的最初目的是将其用于数字支付系统，但是此状态代码很少使用，并且不存在标准约定。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;403&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Forbidden&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;客户端没有访问内容的权限；也就是说，它是未经授权的，因此服务器拒绝提供请求的资源。与 401 Unauthorized 不同，服务器知道客户端的身份。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;404&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Not Found&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;服务器找不到请求的资源。在浏览器中，这意味着无法识别 URL。在 API 中，这也可能意味着端点有效，但资源本身不存在。服务器也可以发送此响应，而不是 &lt;code&gt;403 Forbidden&lt;/code&gt;，以向未经授权的客户端隐藏资源的存在。这个响应代码可能是最广为人知的，因为它经常出现在网络上。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;405&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Method Not Allowed&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;服务器知道请求方法，但目标资源不支持该方法。例如，API 可能不允许调用DELETE来删除资源。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;406&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Not Acceptale&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当 web 服务器在执行 服务端驱动型内容协商机制](/zh-CN/docs/Web/HTTP/Content_negotiation#服务端驱动型内容协商机制)后，没有发现任何符合用户代理给定标准的内容时，就会发送此响应。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;407&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Proxy Authentication Required&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;类似于 401 Unauthorized 但是认证需要由代理完成。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;408&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Request Timeout&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;此响应由一些服务器在空闲连接上发送，即使客户端之前没有任何请求。这意味着服务器想关闭这个未使用的连接。由于一些浏览器，如 Chrome、Firefox 27+ 或 IE9，使用 HTTP 预连接机制来加速冲浪，所以这种响应被使用得更多。还要注意的是，有些服务器只是关闭了连接而没有发送此消息。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;409&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Conflict&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当请求与服务器的当前状态冲突时，将发送此响应。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;410&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Gone&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当请求的内容已从服务器中永久删除且没有转发地址时，将发送此响应。客户端需要删除缓存和指向资源的链接。HTTP 规范打算将此状态代码用于“有限时间的促销服务”。API 不应被迫指出已使用此状态代码删除的资源。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;411&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Length Required&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;服务端拒绝该请求因为 &lt;code&gt;Content-Length&lt;/code&gt; 头部字段未定义但是服务端需要它。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;412&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Precondition Failed&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;客户端在其头文件中指出了服务器不满足的先决条件。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;413&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Payload Too Large&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;请求实体大于服务器定义的限制。服务器可能会关闭连接，或在标头字段后返回重试 &lt;code&gt;Retry-After&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;414&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;URI Too Long&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;客户端请求的 URI 比服务器愿意接收的长度长。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;415&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Unsupported Media Type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;服务器不支持请求数据的媒体格式，因此服务器拒绝请求。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;416&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Rabge Not Satisfiale&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;无法满足请求中 &lt;code&gt;Range&lt;/code&gt; 标头字段指定的范围。该范围可能超出了目标 URI 数据的大小。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;417&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Expectation Failed&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;此响应代码表示服务器无法满足 &lt;code&gt;Expect&lt;/code&gt; 请求标头字段所指示的期望。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;418&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;I&#39;m Teapot&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;服务端拒绝用茶壶煮咖啡。笑话，典故来源茶壶冲泡咖啡&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;421&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Misdirected Request&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;请求被定向到无法生成响应的服务器。这可以由未配置为针对请求 URI 中包含的方案和权限组合生成响应的服务器发送。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;422&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Unproccessable Entity&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;请求格式正确，但由于语义错误而无法遵循。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;423&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Locked&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正在访问的资源已锁定。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;424&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Failed Dependency&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;由于前一个请求失败，请求失败。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;425&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Too Early&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;表示服务器不愿意冒险处理可能被重播的请求。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;426&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Upgrade Required&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;服务器拒绝使用当前协议执行请求，但在客户端升级到其他协议后可能愿意这样做。 服务端发送带有 &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Upgrade&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Upgrade (en-US)&lt;/a&gt; 字段的 426 响应 来表明它所需的协议（们）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;428&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Precondition Required&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用户在给定的时间内发送了太多请求（&amp;ldquo;限制请求速率&amp;rdquo;）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;431&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Request Header Fields Too Large&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;服务器不愿意处理请求，因为其头字段太大。在减小请求头字段的大小后，可以重新提交请求。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;451&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Unavailable For Legal Reasons&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用户代理请求了无法合法提供的资源，例如政府审查的网页。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;500&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Internal Server Error&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;服务器遇到了不知道如何处理的情况。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;501&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Not Implement&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;服务器不支持请求方法，因此无法处理。服务器需要支持的唯二方法（因此不能返回此代码）是 GET and HEAD.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;502&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Bad Gateway&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;此错误响应表明服务器作为网关需要得到一个处理这个请求的响应，但是得到一个错误的响应。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;503&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Service Unavailable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;服务器没有准备好处理请求。常见原因是服务器因维护或重载而停机。请注意，与此响应一起，应发送解释问题的用户友好页面。这个响应应该用于临时条件和如果可能的话，HTTP 标头 Retry-After 字段应该包含恢复服务之前的估计时间。网站管理员还必须注意与此响应一起发送的与缓存相关的标头，因为这些临时条件响应通常不应被缓存。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;504&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Gateway Timeout&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当服务器充当网关且无法及时获得响应时，会给出此错误响应。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;505&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;HTTP Version Not Supported&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;服务器不支持请求中使用的 HTTP 版本。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;506&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Variant Also Negotiates&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;服务器存在内部配置错误：所选的变体资源被配置为参与透明内容协商本身，因此不是协商过程中的适当终点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;507&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Insufficient Storage&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;无法在资源上执行该方法，因为服务器无法存储成功完成请求所需的表示。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;508&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Loop Detected&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;服务器在处理请求时检测到无限循环。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;510&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Not Extented&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;服务器需要对请求进行进一步扩展才能完成请求。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;511&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Network Authentication Required&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指示客户端需要进行身份验证才能获得网络访问权限。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description>
        </item>
        
    </channel>
</rss>
